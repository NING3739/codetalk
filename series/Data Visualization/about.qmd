---
title: "Data Visualization"
date: "2022-12-01"
categories: [Data Science, Data Visualization]
description: Data Science-Data Visualization
image: https://images.unsplash.com/photo-1565106430482-8f6e74349ca1?ixlib=rb-1.2.1&q=80&cs=tinysrgb&fm=jpg&crop=entropy&w=3600
code-fold: false
editor: visual
---

# Welcome!

## What is data visualization?

Data visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data. Additionally, it provides an excellent way for employees or business owners to present data to non-technical audiences without confusion.

In the world of Big Data, data visualization tools and technologies are essential to analyze massive amounts of information and make data-driven decisions.

# Introduction to Data Visualization and Distributions

## Overview

After completing this section, we will:

-   understand the importance of data visualization for communicating data-driven findings.

-   be able to use distributions to summarize data.

-   be able to use the average and the standard deviation to understand the normal distribution

-   be able to access how well a normal distribution fit the data using a quantile-quantile plot.

-   be able to interpret data from a box plot

## Introduction to Data Visualization

### Key Point:

-   Plots of data easily communicate information that is difficult to extract from table of raw values.

-   Data visualization is a key component of exploratory data analysis (EDA), in which the properties of data are explored through visualization and summarization techniques.

-   Data visualization can help discover biases, systematic errors, mistakes and other unexpected problems in data before those data are incorporated into potentially flawed analysis.

-   Basics of data visualization and EDA will be covered in R by using the ggplot2 package and motivating examples from world health, economics and infections disease.

### Code:

```{r}
library(dslabs)
data(murders)
head(murders)
```

## Introduction to Distributions

### Key Points:

[[(**Variance/Deviation Var**)方差](https://baike.baidu.com/item/方差/3108412): 方差越大，数据的波动越大；方差越小，数据的波动就越小。]{.aside}

[[(**Standard Deviation**)标准差](https://baike.baidu.com/item/标准差/1415772): 方差开根号。]{.aside}

-   The most basic statistical summary of a list of object is its distribution.

-   We will learn ways to visualize and analyze distributions in the upcoming videos.

-   In some cases, data can be summarized by two-number summary: the average and standard deviation.I will learn to use data visualization to determine when that is appropriate.

### Data Types

In R, there are [6 basic data types](https://www.programiz.com/r/data-types):

-   `logical`

-   `numeric`

-   `integer`

-   `complex`

-   `character`

-   `raw`

::: callout-important
Categorical data are variables that are defined by a small number of groups.

-   Ordinal categorical data have an inherent order to the categories (mild/medium/hot, for example).

-   Non-ordinal categorical data have no order to the categories.
:::

::: callout-important
Numerical data take a variety of numeric values.

-   Continuous variables can take any value.

-   Discrete variables are limited to sets of specific values.
:::

```{mermaid}
flowchart LR
  A[Main variable types] --> B{Catrgorical}
  A[Main variable types] --> C{Numeric}
  B{Catrgorical} --> D[ordinal]
  B{Catrgorical} --> E[non-ordinal]
  C{Numeric} --> F[continuous]
  C{Numeric} --> G[discrete]
```

### Exercise

```{r, eval=FALSE}
# extract the variable names from a dataset
names(x)
# explore how many unique values are used in dataset
unique(x)
# determine how many variable were reported
length(x)
# determine how many unique variable were reported
length(unique(x))
# to compute the frequencies of each unique value
table(x)
```

## Describe Heights to ET

### key point:

-   A distribution is a function or description that shows the possible values of a variable and how often those values occur.
-   For categorical variables, the distribution describes the proportions of each category.
-   A *frequency table* is the simplest way to show a categorical distribution. Use `prop.table()` to convert a table of counts to a frequency table. *Barplots* display the distribution of categorical variables and are a way to visualize the information in frequency tables.
-   For continuous numerical data, reporting the frequency of each unique entry is not an effective summary as many or most values are unique. Instead, a distribution function is required.
-   The [*cumulative distribution function (CDF)*](https://en.wikipedia.org/wiki/Cumulative_distribution_function) is a function that reports the proportion of data below a value $a$ for all values of $a$ :$F(a)=Pr(x≤a)$.
-   The proportion of observations between any two values $a$ and $b$ can be computed from the CDF as $F(b)-F(a)$.
-   A *histogram* divides data into non-overlapping bins of the same size and plots the counts of number of values that fall in that interval.

### Code:

[R 语言学习 - [`table()`](https://blog.csdn.net/wlt9037/article/details/76570155 "table()结果提取") 结果提取.]{.aside}

```{r, output=FALSE}
# load the dataset
library(dslabs)
data(heights)
# make a table of category proportions
prop.table(table(heights$sex))
```

## Cumulative Distribution Function

Every *continuous distribution* has *cumulative distribution function (CDF)*. The CDF defines the proportion of the data below a given value for all values of $a$ :

![Cumulative Distribution Function (CDF)](http://rafalab.dfci.harvard.edu/dsbook/book_files/figure-html/ecdf-1.png)

As defined above, this plot of the CDF for male heights has height value *a* on the x-axis and the proportion of student with heights of that value or lower(*F(*a*)*) on the y-axis.

The CDF is essential for calculating probabilities related to continuous data. In a continuous dataset, the probability of a specific exact value is not informative because most entries are unique. For example, in the student heights data, only one individual reported a height of 68.8976377952726 inches, but many students rounded similar heights to 69 inches. If we computed exact value probabilities, we would find that being exactly 69 inches is much more likely than being a non-integer exact height, which does not match our understanding that height is continuous. We can instead use the CDF to obtain a useful summary, such as the probability that a student is between 68.5 and 69.5 inches.

For datasets that are not normal, the CDF can be calculated manually by defining a function to compute the probability above. This function can then be applied to a range of values across the range of the dataset to calculate a CDF. Given a dataset`my_data`, the CDF can be calculated and plotted like this:

[R语言中的[\[`apply()`\]，\[`lapply()`\]，\[`sapply()`\]，`tapply()`](https://www.jianshu.com/p/59fb24ca2ea7)函数以及示例]{.aside}

### Code for CDF:

```{r, eval=FALSE}
# Cumulative Distribution Function 
a <- seq(min(x), max(x), length) # define range of the values
cdf_function <- function(x) {
    mean(my_data <= x)
}
cdf_values <- sapply(a, cdf_function)
plot(a, cdf_values)
```

### Code for student height:

```{r}
# example for student heights
a <- seq(min(heights$height), max(heights$height), length = 100)
cdf_function <- function(x){
  mean(heights$height <= x)
}
cdf_value <- sapply(a, cdf_function)
plot(a, cdf_value)
```

The CDF defines that proportion of data below a cut-off $a$. To define the proportion of values above $a$, we compute: $1-F(a)$

To define the proportion of values between $a$ and $b$, we compute: $F(b)-F(a)$

Note that the CDF can help compute probabilities. The probability of observing a randomly chosen value between $a$ and $b$ is equal to the proportion of values between $a$ and $b$, which we compute with the CDF.

## Smooth Density Plots

### Key Point:

::: callout-note
### A further note on histograms

The choice of binwidth has a determinative effect on sharp. There is no "correct" choice for binwidth, and you can sometimes gain insights into the data by experimenting with binwidths.
:::

-   *Smooth density plots* can be thought of as ***histograms where the binwidth is extremely or infinitely small***. The smoothing function makes estimates of the true continuous trend of the data given the available sample of data points.

-   The degree of smoothness can be controlled by an argument in the plotting function.

-   While the histogram is an assumption-free summary, the smooth density plot is shaped by assumptions and choices you make as a data analyst.

-   ***The y-axis is scaled so that the area under the density curve sums to 1.*** <!--#这是因为Y轴表示的是区间内的变量占总体的比重。 所有区间相加等于1。-->This means that interpreting value on the y-axis is not straightforward. To determine the proportion of data in between two values, compute the area under the smooth density curve in the region between those values.

-   An advantage of smooth densities over histograms is that ***densities are easier to compare visually***.

## Normal Distribution

### Key Points:

-   [The normal distribution](https://www.youtube.com/watch?v=xI9ZHGOSaCg&ab_channel=AceTutors):

    -   is ***centered around*** one value, the ***mean***
    -   is ***symmetric(对称)*** around the mean.
    -   is defined completely by its ***mean(***$\mu$**)** and ***standard deviation(***$\sigma$**)**
    -   ***Always has the same proportion*** of observations ***within a given distance*** of the mean (for example, 95% with 2$\sigma$)

-   The standard deviation is the ***average distance between a value and the mean value***.

-   Calculate the mean using the ***`mean()`*** function.

-   Calculate the standard deviation using the ***`sd()`*** function or manually.

-   ***Standard units*** describe how many standard deviations a value is away from the mean. The z-score, or number of standard deviation an observation is away from the mean $\mu$:

    $$
      z = (x-\mu)/\sigma
      $$

-   Computer standard units with the `scale()` function.

-   ***Important:*** to calculate the proportion of value that meet a certain condition, use the `mean` function on a logical vector. Because `TRUE` is converted to 1 and `FALSE` is converted to 0, taking the mean of this vector yields the proportion of `TURE`.

## Equation for the normal distribution

The normal distribution is mathematically defined by the following formula for any mean $\mu$ and standard deviation $\sigma$:

$$
Pr(a < x < b) = \int_{a}^b\frac{1}{\sqrt{2\pi\mu}}{e}^{-\frac{1}{2}(\frac{x-\mu^2}{\sigma})}dx
$$

When standard unites $z=0$, the normal distribution is at a maximum, the mean $\mu$. The function is defined to be symmetric around $z=0$.

The normal distribution of z-score is called the *standard normal distribution* and is defined by $\mu=0$ and $\sigma=1$.

Z-score are useful to quickly evalute whether an observation is average or extreme. Z-scores near 0 are average. Z-score above 2 or below -2 are ***significantly above or blew the mean***, and z-scores above 3 or below -3 are ***extrmely rate***.

### Code:

```{r, output=FALSE}
# define x as vector of male heights
library(tidyverse)
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]

# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x-average)^2)/length(x))

# built-in mean and sd functions - note that the audio and printed value disagree
average <- mean(x)
SD <- sd(x)
c(average = average, SD = SD)

# calculate standard units
z <- scale(x)

# calculate proportion of value within 2 SD of mean
mean(abs(z) < 2)
```

[***function `sd()`:***The built-in R ***function `sd()`*** calculates the standard deviation, but it divides by ***`length(x)-1`*** instead of ***`length(x)`***. When the length of the list is large, this difference is negligible and you can use the built-in ***`sd()`*** function. Otherwise, you should compute σ by hand. For this course series, assume that you should use the ***`sd()`*** function unless you are told not to do so.]{.aside}

Here we will learn more about benchmark z-score value and their corresponding probabilities.

### The 68-95-99.7 Rule

The normal distribution is associated with the 68-95-99.7 rule. This rule describes the probability of observing events within a ceration number of standard deviations of the mean.

![Normal Distribution Probabilities](https://courses.edx.org/assets/courseware/v1/28d10d22ba8b3bf4b0cc5024de0dc616/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-probs-combined.png)

The probability distribution function for the normal distribution is defined such that:

-   About 68% of observations will be within one standard deviation of the mean($\mu\pm\sigma$). In standard units, this is equivalent to a z-score of $|z|\leq2$

![Probability of an observation within 1 SD of mean](https://courses.edx.org/assets/courseware/v1/f0bb9f66b7bdd91b2c9852c7a68427c7/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-1sd.png)

-   About 95% of observations will be within two standard seviations of the mean($\mu\pm2\sigma$). In standard units, this is equivalent to a z-sore of $|z|\leq2$.

![Probability of an ovservation within 2 SD of mean](https://courses.edx.org/assets/courseware/v1/9686a507a97a536a1f5c6b6a01bd8154/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-2sd.png)

-   About 99.7% of observations will be within three standard deviations of the mean($\mu\pm3\sigma$). In standard units, this is equivalent to a z-score of $|z|\leq3$.

![Probability of an observation within 3 SD of mean](https://courses.edx.org/assets/courseware/v1/a8af7c699c20d1e83819b5f68bf6f17d/asset-v1:HarvardX+PH125.2x+1T2022+type@asset+block/norm-dist-3sd.png)

## The Normal CDF and pnorm

### Key points:

-   The normal distribution has a mathematically defined CDF which can be computed in R with the function `pnorm`.

-   `pnom(a, avg, s)` gives the value of the cumculative distribution function *F(a)* for the normal distribution defined by average *avg* and standard deviation *s*.

-   we say that a random quantity is normally distributed with average *avg* and standard deviation *s* if the approximate *pnorm(a, avg, s)* holds for all values of *a*.

-   If we are willing to use the normal approximation for height, we can estimate the distribution simply from the mean and standard deviation of our values.

-   If we treat the height data as discrete rather than categorical, we see that the data are not very useful because integer values are more common that expected due to rounding. This is called discretization.

-   With rounded data, the normal approximation is particularly useful when computing probabilities of intervals of length 1 that include exactly over integer.

### Code: Using pnorm to calculate probabilities

Given male heights x:

```{r, output=FALSE}
library(tidyverse)
library(dslabs)
data("heights")
x <- heights %>% filter(sex=="Male") %>% pull(height)
```

we can estimate the probability that a male is taller than 70.5 inches with:

```{r, output=FALSE}
1 - pnorm(70.5, mean(x), sd(x))
```

### Code: Discretization and the normal approximation

```{r}
# plot distribution of exact heights in data
plot(prop.table(table(x)), xlab = "a = Height in inches", ylab = "Pr(x = a)")
```

```{r, output=FALSE}
# probabilities in actual data over length 1 ranges containing a integer
mean(x <= 68.5) - mean(x <= 67.5)
mean(x <= 69.5) - mean(x <= 68.5)
mean(x <= 70.5) - mean(x <= 69.5)

# probabilities in normal approximation match well
pnorm(68.5, mean(x), sd(x)) - pnorm(67.5, mean(x), sd(x))
pnorm(69.5, mean(x), sd(x)) - pnorm(68.5, mean(x), sd(x))
pnorm(70.5, mean(x), sd(x)) - pnorm(69.5, mean(x), sd(x))

# probabilities in actual data over other ranges don't match normal approx as well
mean(x <= 70.9) - mean(x <= 70.1)
pnorm(70.9, mean(x), sd(x)) - pnorm(70.1, mean(x), sd(x))
```

## Definition of quantiles

### Definition of quantiles

[Quantiles](https://www.youtube.com/watch?v=Ky7QeVgv-BA&ab_channel=MarinStatsLectures-RProgramming%26Statistics) are cut off points that divide a dataset into intervals with set probability. The *qth* quantile is the value at which *q%* of the observation are ***equal to or less than that value***.

### Using the quantile function

Given a dataset `data` and desired quantile `q`, you can find the `q` the quantile of `data` with:

```{r, eval=FALSE}
quantile(data,q)
```

### Percentiles

Percentiles are the quantiles that divide a dataset into 100 intervals each with 1% probability. You can determine all percentiles of a dataset `data` like this:

```{r, eval=FALSE}
p <- seq(0.01, 0.09, 0.01)
quantile(data, p)
```

### Quartiles

Quartiles divide a dataset into 4 parts each with 25% probability. They are equal to the 25th, 50th and 75th percentiles. The 25th percentile is also known as the *1st quartile*, the 50th percentile is also konwn as the median, and the 75th percentile is also knowns as the *3rd quartile*.

The ***`summary()`*** function returns the minimum, quartiles and maximum of a vector.

### Examples

Load the heights dataset from the *dslabs* package:

```{r, output=FALSE}
library(dslabs)
data("heights")
```

Use`summary`on the `heights$height` variable to find the quartiles:

```{r}
summary(heights$height)
```

Find the percentiles of `height$height`:

```{r}
p <- seq(0.01, 0.99, 0.01)
percentiles <- quantile(heights$height, p)
```

Confirm that the 25th and 75th percentiles match that 1st and 3rd quartiles. Note that `quantile()` returns a named vector. You can access the 25th and 75th percentiles like this (adapt the code for other percentile value):

```{r}
percentiles[names(percentiles) == "25%"]
percentiles[names(percentiles) == "75%"]
```

## Finding quantile with qnorm

### Definiton of qnorm

[简单来说,[***`qnorm`***](https://www.jianshu.com/p/a24eb1b94177)是正态分布***累积分布函数(CDF)***的反函数， 也就是说它可以视为`pnorm`的反函数, 这里`q`指的是quantile, 即分位数]{.aside}

The [`qnorm()`](https://www.youtube.com/watch?v=X5NXDK6AVtU&ab_channel=TheDataDigest) function gives the theoretical value of a quantile with probability `p` of observing a value equal to or less than that quantile value a normal distribution with mean `mu` and standard deviation `sigma`:

```{r,eval=FALSE}
qnorm(p, mu, sigma)
```

***By default, `mu`=0 and `sigma`=1***. Therefore, calling `qnorm()` with no arguments gives quantiles for the standard normal distribution.

```{r, eval=FALSE}
qnorm(p)
```

Recall that quantiles are defined such that $p$ is the probability of a random observation less than or equal to the quantile.

### Realation to pnorm

The `pnorm()` function gives the probability that a value from a standard normal distribution will be less than or equal to a z-score value z. consider: $$pnorm(-1.96)\approx0.025$$ The result of `pnorm()` is the quantile. Note that: $$qnorm(0.025)\approx-1.96$$ `qnorm()` and `pnorm` are inverse functions: $$pnorm(qnorm(0.025))\equiv0.025$$

### Theoretical quantiles

You can use `qnorm()` to determine the theoretical quantiles of a dataset: that is, the theoretical value of quantiles assuming that a dataset follows a normal distribution. Run the `qnorm()` function with the desired probabilities *p*, mean mu and standard deviation sigma.

Suppose male heights follow a normal distribution with a mean of 69 inches and standard deviation of 3 inches. The theoretical quantiles are:

```{r}
p <- seq(0.01, 0.99, 0.01)
theoretical_quantiles <- qnorm(p, 69, 3)
```

Theoretical quantiles can be compared to sample quantiles determined with the quantile function in order to evaluate whether the sample follows a normal distribution.

## Quantile-Quantile Plots

### Key Points:

-   Quantile-quantile plots, or QQ-plot, are used to check whether distributions are well-approximated by a normal distribution.

-   Given a proportion *p*, the quantile *q* is the value such that the proportion of values in the data blew *q* is *p*.

-   In a QQ-plot, the sample quantiles in the observed data are compared to the theoretical quantiles expected from the normal distribution. If the data are well-approximated by the normal distribution, then the points on the QQ-plot will fall near the identity line(sample = theoretical).

-   Calculate sample quantiles (observed quantiles) using the `quantile()` function.

-   Calculate theoretical quantiles with the `qnorm()` function. `qnorm()` will caculate quantiles for the standard normal distribution ($\mu=0, \sigma=1$) by default, but it can calculate quantiles for any normal distribution given `mean()` and `sd()` arguments.

### Code:

```{r}
# define x and z
library(tidyverse)
library(dslabs)
data(heights)

index <- heights$sex=="Male"
x <- heights$height[index]
z <- scale(x)

# proportion of data below 69.5
mean(x <= 69.5)

# calculate observed and theoretical quantiles
p <- seq(0.05, 0.95, 0.05)
observed_quantiles <- quantile(x, p)
theoretical_quantiles <- qnorm(p, mean = mean(x), sd = sd(x))

# make QQ-plot
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)

# make QQ-plot with scaled values
observed_quantiles <- quantile(z, p)
theoretical_quantiles <- qnorm(p)
plot(theoretical_quantiles, observed_quantiles)
abline(0,1)
```

## Percentiles

### Key Points:

-   Percentiles are the quantiles obtained when defining $p$ as 0.01, 0.02,...,0.99. They summarize the values at which a certain percent of the observations are equal to or less than that value.

-   The 50th percentile is also known as the median.

-   The quartiles are the 25th, 50th and 75th percentiles.

## Boxplots

[R语言如何绘制[箱线图](https://zhuanlan.zhihu.com/p/440914623)]{.aside}

### Key Points:

-   When data do not follow a normal distribution and cannot be succinctly summarized by only the mean and standard deviation, an alternative is to report a five-number summary: range (ignoring outliers) and the quartiles (25th, 50th, 75th percentile).

-   In a [boxplot](https://www.youtube.com/watch?v=INSIyaZUXIY&ab_channel=DATAtab), the box is defined by the *25th* and *75th* percentiles and the *median* is ***a horizontal line through the box***. The *whiskers* show ***the range excluding outliers***, and outliers are plotted separately as individual points.

-   The *interquartile range* is the distance between the 25th and 75th percentiles.

-   Boxplots are particularly useful when comparing *multiple distributions*.

## Distribution of Female Heights

### Key Points:

-   If a distribution is not normal, it cannot be summarized with only the mean and standard seviation. Provide a histogram, smooth density or boxplot instead.

-   A plot can force us to see unexpected results that make us question the quality or implication of our data.

# Introduction to ggplot2

## Overview

After completing ggplot2, we will:

-   be able to use ggplot2 to create data visualizations in R.

-   be able to explain what the data component of a graph is.

-   be able to identify the geometry component of a graph and know when to use which type of geometry. be able to explain what the aesthetic mapping component of a graph is.

-   be able to understand the scale component of a graph and select an appropriate scale component to use.

## ggplot

### ggplot2

-   [Data visualization with ggolot2](https://datacarpentry.org/R-ecology-lesson/04-visualization-ggplot2.html)

-   [Data visualization with ggplot2: Cheat Sheet](https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf)

-   [The R graph gallery example](https://r-graph-gallery.com/index.html)

### key Points:

-   Throughout the series, we will create plots with the ggplot2 package. **ggplot2** is part of the **tidyverse** suite of package, which you can load with **`library(tidyverse)`**.

-   Note that you can also load **ggplot2** alone using the command **`library(ggplot2)`**, instead of loading the entire tidyverse.

-   **ggplot2** uses a **grammar of graphics** to break plots into building blocks that have intuitive syntax, making it easy to create relatively complex and aesthetically pleasing plots with relatively simple and readable code.

-   **ggplot2** is designed to work excusively with tidy data (**rows are observations and columns are variables**).

## Graph Components

### Key Points:

-   Plots in **ggplot2** consist of 3 main components:
    -   **Data**: The dataset being summarized
    -   **Geometry**: The type of plot(scatterplot, boxplot, barplot, histogram, qqplot, smooth desity, etc.)
    -   **Aesthetic mapping**: Variable mapped to visual cues, such as x-axis and y-axis values and color.

### Code:

```{r, eval=FALSE}
library(dslabs)
data(murders)
```

## Creating a New Plot

### Key Points:

-   You can associated a dataset `x` with a ggplot object with any of the 3 commands:

    -   **`ggplot(data = x)`**
    -   **`ggplot(x)`**
    -   **`x %>% ggplot()`**

-   You can assign a ggplot object to a variable. If the object is not assigned to a variable, it will automatically be displayed.

-   You can display a ggplot object assigned to a variable by printing that variable.

Code:

```{r, eval=FALSE}
library(tidyverse)
library(dslabs)
data(murders)

ggplot(data = murders)

murders %>% ggplot()

p <- ggplot(data = murders)

class(p)

print(p) # this is equivalent to simply typing p
p 
```

## Layers

### Key Points:

-   In **ggplot2**, graphs are created by adding layers to the ggplot object: DATA %\>% ggplot() + LAYER_1 + LAYER_2 + ... + LAYER_N

-   The ***geometry layer*** defines that plot type and takes the format `geom_x` where `x` is the plot type.

-   ***Aesthetic mappings*** describe how properties of **the data connect with features of the graph** (axis position, color, size, etc.) define aesthetic mapping with `aes()` function.

-   **`aes()`** uses variable names from the object component (for example, **`total`** rather than **`murders$total`**).

-   **`geom_point()`** creates a scatterplot and requires `x` and `y` aesthetic mappings.

-   **`geom_text()`** and **`geom_label`** add text to a scatterplot and require `x`, `y`, and `label` aesthetic mappings.

-   To determine which aesthetic mappings are required for a geometry, read the help file for that geometry.

-   You can add layers with different aesthetic mappings to the same graph.

Code: Adding layers to a plot

```{r,eval=FALSE}
library(tidyverse)
library(dslabs)
data(murders)

murders %>% ggplot() +
  geom_point(aes(x = population/10^6, y = total))
```

```{r}
# add points layer to predefined ggplot object
p <- ggplot(data = murders)
p + geom_point(aes(population/10^6, total))

# add text layer to scatterplot
p + geom_point(aes(population/10^6, total)) +
  geom_text(aes(population/10^6, total, label = abb))
```

Code: Example of `aes` behavior

```{r,eval=FALSE}
# no error from this call
p_test <- p + geom_text(aes(population/10^6, total, lable = abb))

# error - "abb" is not a globally defined variable and cannot be found outside of aes
p_test <- p + geom_text(aes(population/10^6, total), label = abb)
```

## Thinkering

### Key Points:

-   You can modify arguments to geometry functions others than `aes()` and the data.

-   These arguments are not aesthetic mappings: the affect all data points the same way.

-   ***Global aesthetic mappings*** apply to all geometries and can be defined when you initially call `ggplot()`. All the geometries added as layers will default to this mapping. Local aesthetic mapping add additional information or override the default mappings.

::: callout-tip
# **Nudge** points a fixed distance

[`position_nudge(x = 0, y = 0)`](https://ggplot2.tidyverse.org/reference/position_nudge.html?q=nudge#null) is generally useful for adjusting the position of items on discrete scales by a small amount. Nudging is built in to **`geom_text()`** because it's so useful for moving labels a small distance from what they're labeling.
:::

Code:

```{r}
# change the size of the points
p + geom_point(aes(population/10^6, total), size = 3) +
    geom_text(aes(population/10^6, total, label = abb))

# move text labels slightly to the right
p + geom_point(aes(population/10^6, total), size = 3) +
    geom_text(aes(population/10^6, total, label = abb), nudge_x = 1)

# simplify code by adding global aesthetic
p <- murders %>% ggplot(aes(population/10^6, total, label = abb))
p + geom_point(size = 3) +
    geom_text(nudge_x = 1.5)

# local aesthetics override global aesthetics
p + geom_point(size = 3) +
  geom_text(aes(x = 10, y = 800, label = "Hello there!"))
```

## Scales, Labels, and Colors

### Textbook links:

-   [Textbook section on **scales**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#scales)

-   [Textbook section on **labels and titles**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#labels-and-titles)

-   [Textbook section on **categories as colors**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#categories-as-colors)

-   [Textbook section on **annotation, shapes and adjustments**](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#annotation-shapes-and-adjustments)

### Key Points:

-   Convert the x-axis to log scale with **`scale_x_continuous(trans = "log10")`** or **`scale_x_log10()`**. Similar function exist for the y-axis.

-   **Add axis title** with **`xlab()`** and **`ylab()`** function. **Add a plot title** with the **`ggtitle()`** function.

-   **Add a color mapping** that colors points by a varaibale by defining **`col`** argument **within `aes()`**. To color all pints the same way, define **`col`** outside of **`aes()`**.

-   **Add a line** with the **`geom_abline()`** geometry. **`geom_abline()`** takes arguments **`slop`** (default = 1) and **`intercept`**(default = 0). Change the color with **`col`** or **`color`** and line type with [**`lty`**](https://r-charts.com/base-r/line-types/).

-   Placing the line layer after the point layer will overlay the the line on top of the points. To overlay points on the line, **place the line layer before the point layer**.

-   There are many additional ways to tweak your graph that can be found in the **ggplot2** documentation, cheat sheet or on the internet. For example, you can change the legend title with [**`scale_color_discrete`**](https://www.jianshu.com/p/6ba336b3931f).

### Code: Log-scale the x-axis and y-axis

```{r, eval=FALSE}
# define p
library(tidyverse)
library(dslabs)
data(murders)

p <- murders %>% ggplot(aes(population/10^6, total, label = abb))

# log base 10 scale the x-axis and y-axis
p + geom_point(size = 3) +
    geom_text(nudge_x = 0.05) +
    scale_x_continuous(trans = "log10") +
    scale_y_continuous(trans = "log10")
```

```{r}
# efficient log scaling of the axes
p + geom_point(size = 3) +
    geom_text(nudge_x = 0.05) +
    scale_x_log10() +
    scale_y_log10()
```

### Code: Add labels and title

```{r}
p + geom_point(size = 3) +
    geom_text(nudge_x = 0.05) +
    scale_x_log10() +
    scale_y_log10() +
    xlab("Population in million(log scale)") +
    ylab("Total number of murders(log scale)") +
    ggtitle("US Gun Murders in 2010")
```

### Code: Change color of the points

```{r}
# redefine p to be everything except the points layer
p <- murders %>% 
     ggplot(aes(population/10^6, total, label = abb)) +
     geom_text(nudge_x = 0.075) +
     scale_x_log10() +
     scale_y_log10() +
     xlab("Population in million(log scale)") +
     ylab("Total number of murders(log scale)") +
     ggtitle("US Gun Murders in 2010")
```

```{r}
# make all points blue
p + geom_point(size = 3, color = "blue")
```

```{r}
# color points by region
p + geom_point(aes(col = region), size = 3)
```

### Code: Add a line with average murder rate

```{r}
r <- murders %>% 
     summarize(rate = sum(total) / sum(population) * 10^6) %>%      pull(rate)

p <- p + geom_point(aes(col = region), size = 3) +
         geom_abline(intercept = log10(r)) # slop is default of 1

# change line to dashed and dark grey, line under points
p + geom_abline(intercept = log(r), lty = 2, color = "darkgrey") +
    geom_point(aes(col = region), size = 3)
```

::: callout-tip
## Line types in R: Ity

The different **line types** available in **R** are shown in the figure hereafter. The argument [**lty**](http://www.sthda.com/english/wiki/line-types-in-r-lty) can be used to specify the **line type**. To change **line width**, the argument **lwd** can be used.
:::

### Code: Change legend title

```{r}
# capitalize legend title
p <- p + scale_color_discrete(name = "Region")
p
```

## Add-on packages

### Textbook links:

-   [Textbook section on add-on packages](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#add-on-packages)
-   [Textbook section on putting it all together](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#putting-it-all-together)

### Key Points

-   The style of a ggplot graph can be changed using the `theme()` function.

-   The `ggthemes` package adds additional themes.

-   The `ggrepel` package includes a geometry that repels text labels, ensuring they do not overlap with each other: `geom_text_repel()`.

### Code: Adding themes

```{r, output=FALSE}
# theme used for graphs in the textbook and course
library(dslabs)
ds_theme_set()
```

```{r, output=FALSE}
# themes from ggthemes
library(ggthemes)
```

```{r}
p + theme_economist()    # style of the Economist magazine
p + theme_fivethirtyeight()    # style of the FiveThirtyEight website
```

### Code: Putting it all together to assemble the plot

```{r, output=FALSE}
# load libraries
library(tidyverse)
library(ggrepel)
library(ggthemes)
library(dslabs)
data(murders)
```

```{r}
# define the intercept
r <- murders %>%
    summarize(rate = sum(total) / sum(population) * 10^6) %>%
    .$rate
    
# make the plot, combining all elements
murders %>%
    ggplot(aes(population/10^6, total, label = abb)) +
    geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
    geom_point(aes(col = region), size = 3) +
    geom_text_repel() +
    scale_x_log10() +
    scale_y_log10() +
    xlab("Population in millions (log scale)") +
    ylab("Total number of murders (log scale)") +
    ggtitle("US Gun Murders in 2010") +
    scale_color_discrete(name = "Region") +
    theme_economist()
```

## Other Examples

### Textbook links:

-   [Textbook section on histograms](http://rafalab.dfci.harvard.edu/dsbook/distributions.html#histograms-1)

-   [Textbook section on density plots](http://rafalab.dfci.harvard.edu/dsbook/distributions.html#density-plots)

-   [Textbook section on grids of plots](http://rafalab.dfci.harvard.edu/dsbook/ggplot2.html#grids-of-plots)

### Key points

-   `geom_histogram()` creates a histogram. Use the **binwidth** argument to change the width of bins, the fill argument to change the bar fill color, and the col argument to change bar outline color.

-   `geom_density()` creates smooth density plots. Change the fill color of the plot with the fill argument.

-   `geom_qq()` creates a quantile-quantile plot. This geometry requires the sample argument. By default, the data are compared to a standard normal distribution with a mean of 0 and standard deviation of 1. This can be changed with the dparams argument, or the sample data can be scaled.

-   Plots can be arranged adjacent to each other using the `grid.arrange()` function from the **gridExtra** package. First, create the plots and save them to objects (p1, p2, ...). Then pass the plot objects to `grid.arrange()`.

### Code: Histograms in ggplot2

```{r, output=FALSE}
library(tidyverse)
library(dslabs)
data(heights)

# define p
p <- heights %>% 
  filter(sex == "Male") %>% 
  ggplot(aes(x=height))
```

```{r, error=FALSE}
# basic histograms
p + geom_histogram() + ggtitle("binwidth is default")
p + geom_histogram(binwidth = 1) + ggtitle("binwidth is 1")

# histogram with blue fill, black outline, labels and title
p + geom_histogram(binwidth = 1, fill ="blue", col = "black") + 
  xlab("Male heights in inches") +
  ggtitle("histogram")
```

### Code: Smooth density plots in ggplot2

```{r}
p + geom_density()
p + geom_density(fill = "blue", col = "red") +
  xlab("Male heights in inches") +
  ylab("proportion of Male heights") +
  ggtitle("Male heights distribution")
```

### Code: Quantile-quantile plots in ggplot2

```{r}
# basic QQ-plot
p <- heights %>% filter(sex == "Male") %>% 
  ggplot(aes(sample = height))
p + geom_qq()

# QQ-plot against a normal distribution with same mean/sd as data
params <- heights %>% 
  filter(sex == "Male") %>% 
  summarize(mean = mean(height), sd = sd(height))
p + geom_qq(dparams = params) +
  geom_abline()

# QQ-plot of scaled data against the standard normal distribution
heights %>% 
  ggplot(aes(sample = scale(height))) +
  geom_qq() +
  geom_abline()
```

```{r}
# define plots p1, p2, p3
p <- heights %>% filter(sex == "Male") %>% ggplot(aes(x = height))
p1 <- p + geom_histogram(binwidth = 1, fill = "blue", col = "black")
p2 <- p + geom_histogram(binwidth = 2, fill = "blue", col = "black")
p3 <- p + geom_histogram(binwidth = 3, fill = "blue", col = "black")
```

```{r, output=FALSE}
# arrange plots next to each other in 1 row, 3 columns
library(gridExtra)
```

```{r}
grid.arrange(p1, p2, p3, ncol = 3)
```

# Gapminder

## Overview

After completing Gapminder, you will: - understand how Hans Rosling and the Gapminder Foundation use effective data visualization to convey data-based trends.

-   be able to apply the **ggplot2** techniques from the previous section to answer questions using data.

-   understand how fixed scales across plots can ease comparisons.

-   be able to modify graphs to improve data visualization.

## Introduction to Gapminder

Case study: Trends in World Health and Economics

Data Source form Gapminder

We will use this data to answer the following questions about World Health and Economics: - Is it still fair to consider the world as divided into the West and the developing world? - Has income inequality across countries worsened over the last 40 years?

## Gapminder Dataset

### Key Points

-   A selection of world health and economics statistics from the Gapminder project can be found in the `dslabs` package as data(gapminder).

-   Most people have **misconceptions** about world health and economics, which can be addressed by considering real data.

### Code

```{r, output=FALSE}
library(dslabs)
data("gapminder")
```

```{r}
head(gapminder)
names(gapminder)
```

```{r}
gapminder %>% 
  filter(year == 2015 & country %in% c("Sri Lanka", "Turkey")) %>% 
  select(country, infant_mortality)
```

## Life Expectancy and Fertility Rates

### Key Points

-   A prevalent worldview is that the world is divided into two groups of countries:

    -   Western world: high life expectancy, low fertility rate

    -   Developing world: lower life expectancy, higher fertility rate

-   Gapminder data can be used to evaluate the validity of this view.

-   A scatterplot of life expectancy versus fertility rate in 1962 suggests that this viewpoint was grounded in reality 50 years ago. Is it still the case today?

### Code

```{r}
# basic scatterplot of life expectancy versus fertility
ds_theme_set() # set plot theme
filter(gapminder, year == 1962) %>% 
  ggplot(aes(fertility, life_expectancy)) +
  geom_point()

# add color as continent
filter(gapminder, year == 1962) %>% 
  ggplot(aes(fertility, life_expectancy, color = continent)) +
  geom_point()
```

## Faceting

### Key Points

-   Faceting **makes multiple side-by-side plots stratified by some variable**. This is a way to ease comparisons.

-   The `facet_grid()` function allows *faceting by up to two variables*, with rows faceted by one variable and columns faceted by the other variable. To facet by only one variable, use the dot operator as the other variable.

-   The `facet_wrap()` function *facets by one variable and automatically wraps the series of plots* so they have readable dimensions.

-   Faceting keeps the axes fixed across all plots, easing comparisons between plots.

-   The data suggest that the developing versus Western world view no longer makes sense in 2012.

[ggplot2-[分面(facet) 一页多图](https://blog.csdn.net/tanzuozhev/article/details/51112177)]{.aside} [数据可视化章节学习[facet](https://zhuanlan.zhihu.com/p/31044450)]{.aside}

### Code

```{r}
# facet by continent and year
filter(gapminder, year %in% c(1962, 2012)) %>% 
  ggplot(aes(fertility, life_expectancy, col = continent)) +
  geom_point() +
  facet_grid(continent ~ year)

# facet by year only 
filter(gapminder, year %in% c(1962, 2012)) %>% 
  ggplot(aes(fertility, life_expectancy, col = continent)) +
  geom_point() +
  facet_grid(. ~ year)

# facet by year, plots wrapped onto multiple rows
years <- c(1962, 1980, 1990, 2000, 2012)
continents <- c("Europ", "Asia")
gapminder %>% 
  filter(year %in% years & continent %in% continent) %>% 
  ggplot(aes(fertility, life_expectancy, col = continent)) +
  geom_point() +
  facet_wrap(. ~ year)
```

## Time Series Plots

### Key Points

-   Time series plots have time on the *x-axis* and a variable of interest on the *y-axis*.

-   The `geom_line()` geometry connects adjacent data points to form a continuous line. A line plot is appropriate when points are regularly spaced, densely packed and from a single data series.

-   You can plot multiple lines on the same graph. Remember to group or color by a variable so that the lines are plotted independently.

-   Labeling is usually preferred over legends. However, legends are easier to make and appear by default. Add a label with `geom_text()`, specifying the coordinates where the label should appear on the graph.

### Code: Single Time Series

```{r, warning=FALSE}
# scatterplot of US fertility by year
gapminder %>% 
  filter(country == "United States") %>% 
  ggplot(aes(year, fertility)) +
  geom_point()
# line plot of US fertility by year
gapminder %>% 
  filter(country == "United States") %>% 
  ggplot(aes(year, fertility)) +
  geom_line()
```

### Code: Multiple Time Series

```{r, warning=FALSE}
# line plot fertility time series for two countries- only one line (incorrect)
countries <- c("South Korea", "Germany")
gapminder %>% filter(country %in% countries) %>%
    ggplot(aes(year, fertility)) +
    geom_line()
    
# line plot fertility time series for two countries - one line per country
gapminder %>% filter(country %in% countries) %>%
    ggplot(aes(year, fertility, group = country)) +
    geom_line()

# fertility time series for two countries - lines colored by country
gapminder %>% filter(country %in% countries) %>%
    ggplot(aes(year, fertility, col = country)) +
    geom_line()
```

### Code: Adding text labels to a plot

::: callout-note
**labels data frame as the data to ensure where to start label text** ![](https://raw.githubusercontent.com/NING3739/my-personal-website/main/geom_text.png)
:::

```{r}
# life expectancy time series - lines colored by country and labeled, no legend
labels <- data.frame(country = countries, x = c(1975, 1965), y = c(60, 72))
gapminder %>% filter(country %in% countries) %>%
    ggplot(aes(year, life_expectancy, col = country)) +
    geom_line() +
    geom_text(data = labels, aes(x, y, label = country), size = 5) +
    theme(legend.position = "none")
```

## Transformations

### Key Points

-   We use GDP data to compute income in US dollars per day, adjusted for inflation.

-   Log transformations covert multiplicative changes into additive changes.

-   common transformations are the log base 2 transformation and the log base 10 transformation. The choice of base depends on the range of the data. The natural log is not recommended for visualization because it is difficult to interpret.

-   The mode of a distribution is the value with the highest frequency. The mode of a normal distribution is the average. A distribution can have multiple local modes.

-   There are two ways to use log transformations in plots: transform the data before plotting or transform the axes of the plot. Log scales have the advantage of showing the original values as axis labels, while log transformed values ease interpretation of intermediate values between labels.

-   Scale the x-axis using `scale_x_continuous()` or `scale_x_log10()` layers in ggplot2. Similar functions exist for the y-axis.

-   In 1970, income distribution is bimodal, consistent with the dichotomous Western versus developing worldview.

### Code

```{r}
# add dollars per day variable
gapminder <- gapminder %>% 
  mutate(dollars_per_day = gdp/population/365)

# histogram of dollars per day
past_year <- 1970
gapminder %>% 
  filter(year == past_year & !is.na(gdp)) %>% 
  ggplot(aes(dollars_per_day)) +
  geom_histogram(binwidth = 1, color = "black")

# repeat histogram with log2 scaled data
gapminder %>%
    filter(year == past_year & !is.na(gdp)) %>%
    ggplot(aes(log2(dollars_per_day))) +
    geom_histogram(binwidth = 1, color = "black")
    
# repeat histogram with log2 scaled x-axis
gapminder %>%
    filter(year == past_year & !is.na(gdp)) %>%
    ggplot(aes(dollars_per_day)) +
    geom_histogram(binwidth = 1, color = "black") +
    scale_x_continuous(trans = "log2")
```

## Stratify and Boxplot

### Key Points

-   Make boxplots stratified by a categorical variable using the `geom_boxplot()` geometry.

-   Rotate axis labels by changing the theme through `element_text()`. You can change the angle and justification of the text labels.

-   Consider ordering your factors by a meaningful value with the `reorder` function, which changes the order of factor levels based on a related numeric vector. This is a way to ease comparisons.

-   Show the data by adding data points to the boxplot with a `geom_point` layer. This adds information beyond the five-number summary to your plot, but too many data points it can obfuscate your message.

### Code: Boxplot of GDP by region

```{r}
# add dollars per day variable
gapminder <- gapminder %>% 
  mutate(dollars_per_day = gdp/population/365)

# number of regions
length(levels(gapminder$region))

# boxplot of GDP by region in 1970
past_year <- 1970
p <- gapminder %>% 
     filter(year == past_year & !is.na(gdp)) %>% 
     ggplot(aes(region, dollars_per_day))
p + geom_boxplot()

# roation name on x-axis
p + geom_boxplot() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### Code: The reorder function

::: callout-tip
[Reorder a variable with ggplot2](https://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html)
:::

```{r}
# by default, factor order is alphabetical
fac <- factor(c("Asia", "Asia", "West", "West", "West"))
levels(fac)

# reorder factor by the category means
value <- c(10, 11, 12, 6, 4)
fac <- reorder(fac, value, FUN = mean)
levels(fac)
```

### Code: Enhanced boxplot ordered by median income, scaled, and showing data

```{r}
# reorder by median income and color by continent 
p <- gapminder %>%
    filter(year == past_year & !is.na(gdp)) %>%
    mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%  # reorder
    ggplot(aes(region, dollars_per_day, fill = continent)) + # color by continent 
    geom_boxplot() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    xlab("")
p

# log2 scale y-axis
p + scale_y_continuous(trans = "log2")

# add data points
p + scale_y_continuous(trans = "log2") + geom_point(show.legend = FALSE)
```

## Comparing Distributions

::: callout-important
[intersect(交集);union(并集);setdiff(找不同);setequal(判断相同)](https://blog.csdn.net/woodcorpse/article/details/80494605)
:::

### Key Points

-   Use `intersect` to find the overlap between two vectors.
-   To make boxplots where grouped variables are adjacaent, color the boxplot by a factor instead of faceting by that factor. This is a way to ease comparisions.
-   The data suggest that the income gap between rich and poor countries has narrowed, not expended.

### Code: Histogram of income in West versus developing world, 1970 and 2010

```{r}
# add dollars per day variable and define past year
gapminder <- gapminder %>% 
  mutate(dollars_per_day = gdp/population/365)
past_year <- 1970

# define Western countries
west <- c("Western Europe", "Northern Europe", "Southern Europe", "Northern America", "Australia and New Zealand")

# facet by West vs Devloping 
gapminder %>% 
  filter(year == past_year & !is.na(gdp)) %>% 
  mutate(group = ifelse(region %in% west, "West", "Developing")) %>% 
  ggplot(aes(dollars_per_day)) +
  geom_histogram(binwidth = 1, color = "black") +
  scale_x_continuous(trans = "log2") +
  facet_grid(. ~group)

# facet by West/Developing and year
present_year <- 2010
gapminder %>%
    filter(year %in% c(past_year, present_year) & !is.na(gdp)) %>%
    mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
    ggplot(aes(dollars_per_day)) +
    geom_histogram(binwidth = 1, color = "black") +
    scale_x_continuous(trans = "log2") +
    facet_grid(year ~ group)
```

### Code: Income distribution of West verseus Developing world, only countries with data

```{r}
# define countries that have data available in both years
country_list_1 <- gapminder %>% 
  filter(year == past_year & !is.na(dollars_per_day)) %>% .$country

country_list_2 <- gapminder %>% 
  filter(year == present_year & !is.na(dollars_per_day)) %>% .$country

country_list <- intersect(country_list_1, country_list_2)

# make histogram including only countries with data availabe in both years
gapminder %>% 
  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% # keep only selected countries
  mutate(group = ifelse(region %in% west, "West", "Developing")) %>% 
  ggplot(aes(dollars_per_day)) +
  geom_histogram(binwidth = 1, color = "black") +
  scale_x_continuous(trans = "log2") +
  facet_grid(year ~ group)
```

### Code: Boxplots of income in West versus Developing world, 1970 and 2010

```{r}
p <- gapminder %>% 
  filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
  mutate(region = reorder(region, dollars_per_day, FUN = median)) %>% 
  ggplot() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  xlab("") + scale_y_continuous(trans = "log2") 

p + geom_boxplot(aes(region, dollars_per_day, fill = continent)) +
  facet_grid(year ~ .)

# arrange matching boxplots next to each other, colored by year
p + geom_boxplot(aes(region, dollars_per_day, fill = factor(year)))
```

## Density Plots

::: callout-tip
-   [**dplyr处理数据时常用的的函数**](https://bookdown.org/zhongyufei/Data-Handling-in-R/dplyr-functions.html)

-   [**在 R Dplyr 包中使用 case when 语句**](https://verytoolz.com/blog/4341dd7810/)
:::

### Key Points

-   Change the y-axis of density plots to variable counts using `..count..` as the y argument.

-   The `case_when()` function defines a factor whose levels are defined by a variety of logical operations to group data.

-   Plot stacked density plots using `position="stack"`.

-   Define a weight aesthetic mapping to change the relative weights of density plots-for example, this allow weighting of plots by population rather than number of countries.

### Code: Faceted smooth density plots

```{r, warning=FALSE}
# see the code below the previous video for variable definitions

# smooth density plots - area under each curve adds to 1
gapminder %>% 
  filter(year == past_year & country %in% country_list) %>% 
  mutate(group = ifelse(region %in% west, "West", "Developing")) %>% group_by(group) %>% 
  summarize(n = n()) %>% knitr::kable()

# smooth density plots - variable counts on y-axis
p <- gapminder %>% 
  filter(year == past_year & country %in% country_list) %>% 
  mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
  ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +
  scale_x_continuous(trans = "log2")
p + geom_density(alpha = 0.2, bw = 0.75) + facet_grid(year ~ .)
```

### Code: Add new region group with case_when

```{r}
# add group as a factor, grouping regions
gapminder <- gapminder %>% 
  mutate(group = case_when(
    .$region %in% west ~ "West",
    .$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia", 
    .$region %in% c("Caribbean", "Central America", "South America") ~ "Latin America",
    .$continent == "Africa" & .$region != "Northern Africa" ~ "Sub-Saharan Africa", TRUE ~ "Others"))

# reorder factor levels
gapminder <- gapminder %>% 
  mutate(group = factor(group, levels = c("Others", "Latin America", "East Asia", "Sub-Saharan Africa", "West")))
```

### Code: Stacked density plot

```{r}
# note you must redefine p with the new gapminder object first
p <- gapminder %>% 
  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% 
  ggplot(aes(dollars_per_day, fill = group)) +
  scale_x_continuous(trans = "log2")

# stacked density plot
p + geom_density(alpha = 0.2, bw = 0.75, position = "stack") +
  facet_grid(year ~ .)
```

### Code: Weighted stacked density plot

```{r}
gapminder %>% 
  filter(year %in% c(past_year, present_year) & country %in% country_list) %>% 
  group_by(year) %>% 
  mutate(weight = population/sum(population*2)) %>% 
  ungroup() %>% 
  ggplot(aes(dollars_per_day, fill = group, weight = weight)) +
  scale_x_continuous(trans = "log2") +
  geom_density(alpha = 0.2, bw = 0.75, position = "stack") + facet_grid(year ~ .)
```

## Ecological Fallacy

### Key Points
