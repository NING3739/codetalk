{
  "hash": "117b9df1c076c2c0b4348f5243b154c7",
  "result": {
    "markdown": "---\ntitle: \"Cost Calculator\"\ndate: \"2023-04-05\"\ncategories: [shiny]\nimage: \"https://img.freepik.com/free-vector/mortgage-isometric-composition-with-images-calculator-bunch-coins-receipt-with-percentage-vector-illustration_1284-66060.jpg?w=740&t=st=1680648272~exp=1680648872~hmac=5e5fd95b97ec52d2661e3358e2c2e133f8443ec713d77014e6ae138e22e77656\"\ndescription: \"Shiny App for cost calculator\"\nformat:\n  html:\n    code-fold: true\n---\n\n\n# Introduction to Shiny\n\nShiny is an R package for creating interactive web applications directly from R without requiring web development knowledge. A Shiny app generally consists of a user interface (UI) and a server component that contains the app's logic and computations.\n\n# Purpose of this app\n\nThis Shiny app is a service fee calculator designed to calculate and track service fees based on various parameters, such as customer name, service type, add-on services, and service time. The app also allows users to apply or remove a 15% Goods and Services Tax (GST) on the total cost.\n\n#User Interface (UI)\n\nThe UI is divided into three main sections:\n\na.  *Header Panel*: Contains the app's title \"服务费用计算器\" (Service Fee Calculator).\n\nb.  *Sidebar Panel*: Includes input fields for customer name, service type, add-on services, service time, and service date. It also has action buttons for adding/removing GST, adding a service record, and generating a chart.\n\nc.  *Main Panel*: Displays the calculated total cost, a table of service records, a time series plot of service costs, and a download button for exporting the service records as a CSV file.\n\n# Server Component\n\nThe server component handles the app's logic and computations, including:\n\na.  *Calculating the total cost*: Determines the total cost based on service type, add-on services, and service time.\n\nb.  *Applying/removing GST*: Applies or removes a 15% GST on the total cost based on user input.\n\nc.  *Managing service records*: Stores service records in a reactive data frame, updates the records when a new entry is added, and arranges the records in descending order by date.\n\nd.  *Generating a time series plot*: Creates a time series plot of service costs using ggplot2 when the \"生成图表\" (Generate Chart) button is clicked.\n\ne.  *Downloading service records*: Allows users to download service records as a CSV file, with a filename containing the current date.\n\nIn summary, this Shiny app is a user-friendly service fee calculator that helps users input various parameters, calculate the total cost, apply or remove GST, store and display service records, and generate a time series plot of service costs.\n\n# Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(shinythemes)\n\n\ncustom_css <- \"\n.record-table {\n  margin-top: 20px;\n}\n\"\n\n# 定义 UI 组件\nui <- bootstrapPage(\n  theme = shinytheme(\"flatly\"),\n  headerPanel(\"服务费用计算器\"),\n  sidebarPanel(\n    textInput(inputId = \"name\", label = \"客户名字：\", value = \"\"),\n    selectInput(inputId = \"service\", label = \"服务类型：\", \n                choices = c(\"日常清洁\", \"深层清洁\", \"搬出/搬入\")),\n    checkboxGroupInput(inputId = \"addone\", label = \"附加服务：\", \n                       choices = c(\"烤箱\" = \"烤箱\", \"窗户\" = \"窗户\", \"墙和天花板\" = \"墙和天花板\")),\n    numericInput(inputId = \"oven_num\", label = \"烤箱数量：\", value = 1, min = 1),\n    numericInput(inputId = \"window_num\", label = \"窗户数量：\", value = 1, min = 1),\n    textInput(inputId = \"time\", label = \"服务时间（小时）：\", value = \"1\"),\n    dateInput(inputId = \"date\", label = \"服务日期：\", \n              value = Sys.Date()),\n    actionButton(inputId = \"add_gst_button\", label = \"添加 GST（15%）\"),\n    actionButton(inputId = \"remove_gst_button\", label = \"取消 GST（15%）\"),\n    actionButton(inputId = \"add\", label = \"添加服务记录\"),\n    actionButton(inputId = \"plot_button\", label = \"生成图表\")\n  ),\n  mainPanel(\n    h3(\"计算结果：\"),\n    textOutput(outputId = \"total\"),\n    downloadButton(outputId = \"download\", label = \"下载服务记录\"),\n    tags$head(tags$style(HTML(custom_css))),\n    fluidRow(\n      column(12,\n             plotOutput(outputId = \"plot\")\n      ),\n      column(12,\n             div(class = \"record-table\",\n                 tableOutput(outputId = \"records\")\n             )\n      )\n    )\n  ),\n)\n  \n\n# 定义 server 组件\nserver <- function(input, output, session) {\n  gst_active <- reactiveVal(FALSE)\n  \n  observeEvent(input$add_gst_button, {\n    gst_active(TRUE)\n  })\n  \n  observeEvent(input$remove_gst_button, {\n    gst_active(FALSE)\n  })\n  \n  \n  service_records <- reactiveValues(data = data.frame(Date = character(),\n                                                      Name = character(),\n                                                      Service = character(),\n                                                      Time = numeric(),\n                                                      Cost = numeric(),\n                                                      Deleted = logical(),\n                                                      stringsAsFactors = FALSE))\n  \n  \n  # 计算总费用\n  total_cost <- reactive({\n    if(input$service == \"日常清洁\") {\n      cost_per_hour_service <- 40\n    } else if(input$service == \"深层清洁\") {\n      cost_per_hour_service <- 100\n    } else {\n      cost_per_hour_service <- 200\n    }\n    \n    # 初始化 cost_per_hour_addone 变量\n    cost_per_hour_addone <- 0\n    \n    if(\"烤箱\" %in% input$addone) {\n      cost_per_hour_addone <- cost_per_hour_addone + (60 * input$oven_num)\n    }\n    if(\"窗户\" %in% input$addone) {\n      cost_per_hour_addone <- cost_per_hour_addone + (30 * input$window_num)\n    }\n    if(\"墙和天花板\" %in% input$addone) {\n      cost_per_hour_addone <- cost_per_hour_addone + 120\n    }\n    \n    total <- (cost_per_hour_service) * as.numeric(input$time) + cost_per_hour_addone\n    \n    # 应用 GST\n    if (gst_active()) {\n      total <- total * 1.15\n    }\n    \n    return(total)\n  })\n  \n  \n  # 添加服务记录\n  observeEvent(input$add, {\n    if(input$name != \"\") {\n      record <- data.frame(Date = format(input$date, \"%m/%d/%y\"),\n                           Name = input$name,\n                           Service = paste(input$service, \"和\", paste(input$addone, collapse = \"，\")),\n                           Time = as.numeric(input$time),\n                           Cost = total_cost(),\n                           stringsAsFactors = FALSE)\n      service_records$data <- rbind(service_records$data, record)\n    }\n  })\n  \n  \n  # 显示计算结果\n  output$total <- renderText({\n    if(input$name != \"\") {\n      cost <- total_cost()\n      paste0(input$name, \" 需要支付 $\", round(cost, 2), \" 的服务费用。\")\n    } else {\n      \"请输入客户名字。\"\n    }\n  })\n  \n  # 绘制时间序列图\n  output$plot <- renderPlot({\n    if(input$plot_button > 0) {\n      plot_data <- service_records$data %>%\n        mutate(Date = as.Date(Date, \"%m/%d/%y\")) %>%\n        group_by(Date) %>%\n        summarize(TotalCost = sum(Cost))\n      \n      ggplot(plot_data, aes(x = Date, y = TotalCost)) +\n        geom_line() +\n        geom_text(aes(label = round(TotalCost, 2)), vjust = -0.5, size = 4) +\n        labs(title = \"服务费用时间序列图\", x = \"日期\", y = \"服务费用\") +\n        theme_minimal()\n    }\n  })\n  \n  \n  # 下载服务记录\n  output$download <- downloadHandler(\n    filename = function() {\n      paste(\"service_records_\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      req(service_records$data)\n      write.csv(service_records$data, file, row.names = FALSE)\n    }\n  )\n  \n  # 显示服务记录\n  output$records <- renderTable({\n    service_records$data %>%\n      arrange(desc(Date))\n  })\n  \n}\n\n# 运行应用程序\nshinyApp(ui, server)\n```\n:::\n\n```{=html}\n\n<iframe height=\"1000\" width=\"1000\" frameborder=\"no\" style=\"border: none;\" src=\"https://myshinyappforpractice.shinyapps.io/sheet/\"></iframe>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}